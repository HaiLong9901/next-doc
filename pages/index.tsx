import Head from 'next/head'
import Header from '@/components/Header'
import { IconButton, Button, Tooltip } from '@mui/material'
import MoreVertIcon from '@mui/icons-material/MoreVert'
import UnfoldMoreIcon from '@mui/icons-material/UnfoldMore'
import SortByAlphaOutlinedIcon from '@mui/icons-material/SortByAlphaOutlined'
import FormatListBulletedOutlinedIcon from '@mui/icons-material/FormatListBulletedOutlined'
import FolderIcon from '@mui/icons-material/Folder'
import CalendarViewMonthIcon from '@mui/icons-material/CalendarViewMonth'
import { addDoc, collection, doc, serverTimestamp, setDoc, query, where } from 'firebase/firestore'
import { auth, db } from '@/configs/firebase'
import { useAuthState } from 'react-firebase-hooks/auth'
import { useCollection } from 'react-firebase-hooks/firestore'
import { useRouter } from 'next/router'
import { EditorState, convertToRaw } from 'draft-js'
import { useRef, useState } from 'react'
import DocumentCard from '@/components/DocumentCard'
import { Document } from '@/types'
import { useEffect } from 'react'
import { GetServerSideProps } from 'next'
import { convertDocument } from '@/utils/ConvertTime'
import DocumentListItem from '@/components/DocumentListItem'

const documentTest: Document = {
  title: 'test',
  value: 'casc',
  user: 'abc@gmail.com',
  mutable: true,
  updatedAt: '12/03/2023',
  share: [],
}
const documentId = 'ecascnaskc'
export default function Home() {
  const route = useRouter()
  const [user, _loading, _error] = useAuthState(auth)
  const [listStyle, setListStyle] = useState<boolean>(false)
  const layoutRef = useRef<HTMLDivElement>(null)
  const documentsBarRef = useRef<HTMLDivElement>(null)
  const [loggedInUser] = useAuthState(auth)
  useEffect(() => {
    document.addEventListener('scroll', () => {
      console.log(documentsBarRef.current?.offsetHeight)
    })

    return () => {
      document.removeEventListener('scroll', () => {
        console.log('scroll')
      })
    }
  }, [])
  const getDocumentsForCurrentUser = query(collection(db, 'documents'), where('user', '==', loggedInUser?.email))
  const [documentsSnapshot] = useCollection(getDocumentsForCurrentUser)
  documentsSnapshot?.docs.map((doc) => console.log(doc.id))
  return (
    <div className="min-h-screen w-full">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="" ref={layoutRef}>
        <div className="bg-secondaryColor">
          <div className="max-w-6xl mx-auto py-4">
            <div className="flex justify-between items-center">
              <h4 className=" text-base text-blackColor">Start new document</h4>
              <div className="flex">
                <Button className=" normal-case text-base text-blackColor font-normal" endIcon={<UnfoldMoreIcon />}>
                  Sample Library
                  {process.env.FIREBASE_APIKEY}
                </Button>
                <IconButton>
                  <MoreVertIcon />
                </IconButton>
              </div>
            </div>
            <div className=" grid grid-cols-7 mt-4">
              <div
                onClick={async () => {
                  try {
                    const createdDoc = await addDoc(collection(db, 'documents'), {
                      user: user?.email,
                      // owner: user?.email,
                      title: 'The document has no title',
                      value: JSON.stringify(convertToRaw(EditorState.createEmpty().getCurrentContent())),
                      mutable: false,
                      updatedAt: serverTimestamp(),
                    })
                    route.push(`/document/${createdDoc.id}`)
                  } catch (error) {
                    console.log(error)
                  }
                }}
              >
                <img
                  className=" w-36 h-[180px] object-cover border-solid border-[1px] border-borderColor hover:border-blueColor rounded-md cursor-pointer"
                  src="https://ssl.gstatic.com/docs/templates/thumbnails/docs-blank-googlecolors.png"
                  alt=""
                />
                <span className=" text-base text-blackColor">Drum</span>
                <span></span>
              </div>
            </div>
          </div>
        </div>
        <div className="max-w-6xl mx-auto py-4 ">
          <div className="flex justify-between">
            <h3 className="text-base text-primaryColor font-bold">Recent document</h3>
            <div className="flex gap-2" ref={documentsBarRef}>
              <Tooltip title="List mode">
                {!listStyle ? (
                  <IconButton onClick={() => setListStyle((prev) => !prev)}>
                    <FormatListBulletedOutlinedIcon />
                  </IconButton>
                ) : (
                  <IconButton onClick={() => setListStyle((prev) => !prev)}>
                    <CalendarViewMonthIcon />
                  </IconButton>
                )}
              </Tooltip>
              <Tooltip title="Sort mode">
                <IconButton>
                  <SortByAlphaOutlinedIcon />
                </IconButton>
              </Tooltip>
              <Tooltip title="File selection">
                <IconButton>
                  <FolderIcon />
                </IconButton>
              </Tooltip>
            </div>
          </div>
          {listStyle ? (
            <div className=" w-full grid grid-cols-3 lg:grid-cols-5 gap-[15px]">
              {documentsSnapshot?.docs.map((doc) => (
                <DocumentCard document={convertDocument(doc)} outsideRef={layoutRef} documentId={doc.id} key={doc.id} />
              ))}
            </div>
          ) : (
            <div className="flex flex-col w-full">
              {documentsSnapshot?.docs.map((doc) => (
                <DocumentListItem
                  documentData={convertDocument(doc)}
                  outsideRef={layoutRef}
                  documentId={doc.id}
                  key={doc.id}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

// export const getServersideProps: GetServerSideProps<Props> = async (context) => {
//   const documentsQuery = query(collection(db, 'documents'), where('user', '==', loggedInUser?.email))
// }
